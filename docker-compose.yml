services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: race-times-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: race_times_user
      POSTGRES_PASSWORD: race_times_password
      POSTGRES_DB: race_times
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U race_times_user -d race_times"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: race-times-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: race-times-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://race_times_user:race_times_password@postgres:5432/race_times?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./prisma:/app/prisma
    command: sh -c "npx prisma migrate deploy && npm start"

volumes:
  postgres_data:
  redis_data:
